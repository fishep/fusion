import org.apache.tools.ant.filters.ReplaceTokens

description 'build micro service'

buildscript {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        mavenLocal()
        mavenCentral()
    }
}

ext {
    applications = subprojects.findAll { it.name.endsWith("-application") }
    domains = subprojects.findAll { it.name.endsWith("-domain") }
    infrastructures = subprojects.findAll { it.name.endsWith("-infrastructure") }
    interfaces = subprojects.findAll { it.name.endsWith("-interface") }

//    ddd = subprojects.findAll { it.name.endsWith("-application") || it.name.endsWith("-domain") || it.name.endsWith("-infrastructure") || it.name.endsWith("-interface") }
    all = subprojects.findAll { it.name.contains("-") }
}

configure(all) {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    compileJava.options.encoding "UTF-8"
    compileTestJava.options.encoding "UTF-8"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencyManagement {
        dependencies {
            for (depJar in rootProject.ext.dependencies) {
                dependency depJar.value
            }
        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    def profile = System.getProperty("profile") ?: "dev"
    processResources {
        filesMatching('application.yml') {
            filter ReplaceTokens, tokens: [profile: profile]
        }
        filesMatching('bootstrap.yml') {
            filter ReplaceTokens, tokens: [profile: profile]
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        implementation 'cn.hutool:hutool-all'

        annotationProcessor 'org.projectlombok:lombok'


        testCompileOnly 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.junit.jupiter:junit-jupiter'

        testAnnotationProcessor 'org.projectlombok:lombok'


        testFixturesCompileOnly 'org.projectlombok:lombok'
        testFixturesImplementation 'cn.hutool:hutool-all'

        testFixturesAnnotationProcessor 'org.projectlombok:lombok'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    bootJar {
        enabled = false
    }
}
